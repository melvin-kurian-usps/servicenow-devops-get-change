name: Test

on:
  workflow_dispatch:
    
jobs:
  changeApproval:
    name: ServiceNow Change Approval
    runs-on: ubuntu-latest

    steps:
      - name: ServiceNow Change Approval
        uses: ServiceNow/servicenow-devops-change@v6.1.0
        id: create
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          job-name: 'ServiceNow Change Approval'
         # devops-integration-user-name: 'devops.integration.user'
         # devops-integration-user-password: '3o7xwdM2GN1K2iQp'
          instance-url: 'https://usps13.servicenowservices.com'
          context-github: ${{ toJSON(github) }}
          # change-request: '{"attributes":{"short_description":"Automated Software Deployment"}}'
          change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          interval: '100'
          timeout: '3600'
          changeCreationTimeOut: '3600'
          abortOnChangeCreationFailure: true
          abortOnChangeStepTimeout: true
      - name: Output of Change Creation
        run: echo "change-request-number = ${{ steps.create.outputs.change-request-number }} and change-request-sys-id = ${{ steps.create.outputs.change-request-sys-id }} " >> $GITHUB_OUTPUT
      # - name: Output of UpdateChangeDetails
      #   run: echo "The Status of Update Change Request Details => ${{ steps.update.outputs.status }}"
